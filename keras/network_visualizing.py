from keras import modelsfrom keras.preprocessing import imageimport numpy as npimport matplotlib.pyplot as pltfrom keras.applications import VGG16from keras import backend as Kfrom keras.applications.vgg16 import preprocess_input, decode_predictionsimport cv2WEIGHTS_PATH_NO_TOP = 'E:\\git_code\\MachineLearning\\keras\\vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5'WEIGHTS_PATH = 'E:\\git_code\\MachineLearning\\keras\\vgg16_weights_tf_dim_ordering_tf_kernels.h5'def visualizing_activations(model, img_path):    """    可视化激活层    :return:    """    img = image.load_img(img_path, target_size=(150, 150))    img_tensor = image.img_to_array(img)    img_tensor = np.expand_dims(img_tensor, axis=0)    img_tensor /= 255.    print(img_tensor.shape)    plt.cla()    plt.close("all")    plt.imshow(img_tensor[0])    plt.show()    layer_outputs = [layer.output for layer in model.layers[:8]]    activation_model = models.Model(inputs=model.input, outputs=layer_outputs)    activations = activation_model.predict(img_tensor)    first_layer_activation = activations[0]    plt.matshow(first_layer_activation[0, :, :, 4], cmap='viridis')    plt.show()    layer_names = []    for layer in model.layers[:8]:        layer_names.append(layer.name)    images_per_row = 16    for layer_name, layer_activation in zip(layer_names, activations):        n_features = layer_activation.shape[-1]        size = layer_activation.shape[1]        n_cols = n_features // images_per_row        display_grid = np.zeros((size * n_cols, images_per_row * size))        for col in range(n_cols):            for row in range(images_per_row):                channel_image = layer_activation[0, :, :, col * images_per_row + row]                channel_image -= channel_image.mean()                channel_image /= channel_image.std()                channel_image *= 64                channel_image += 128                channel_image = np.clip(channel_image, 0, 255).astype('uint8')                display_grid[col * size: (col + 1) * size, row * size: (row + 1) * size] = channel_image        scale = 1. / size        plt.figure(figsize=(scale * display_grid.shape[1], scale * display_grid.shape[0]))        plt.title(layer_name)        plt.grid(False)        plt.imshow(display_grid, aspect='auto', cmap='viridis')        plt.show()def deprocess_image(x):    x -= x.mean()    x /= (x.std() + 1e-5)    x *= 0.1    x += 0.5    x = np.clip(x, 0, 1)    x *= 255    x = np.clip(x, 0, 255).astype('uint8')    return xdef generate_pattern(layer_name, filter_index, size=150):    layer_output = model.get_layer(layer_name).output    loss = K.mean(layer_output[:, :, :, filter_index])    grads = K.gradients(loss, model.input)[0]    grads /= (K.sqrt(K.mean(K.square(grads))) + 1e-5)    iterate = K.function([model.input], [loss, grads])    input_img_data = np.random.random((1, size, size, 3)) * 20 + 128.    step = 1.    for i in range(40):        loss_value, grads_value = iterate([input_img_data])        input_img_data += grads_value * step        img = input_img_data[0]    return deprocess_image(img)def generate_pattern(model, layer_name, filter_index, size=150):    layer_output = model.get_layer(layer_name).output    loss = K.mean(layer_output[:, :, :, filter_index])    grads = K.gradients(loss, model.input)[0]    grads /= (K.sqrt(K.mean(K.square(grads))) + 1e-5)    iterate = K.function([model.input], [loss, grads])    input_img_data = np.random.random((1, size, size, 3)) * 20 + 128.    step = 1.    for i in range(40):        loss_value, grads_value = iterate([input_img_data])        input_img_data += grads_value * step    img = input_img_data[0]    return deprocess_image(img)def visualizing_filter(model, layer_name):    size = 64    margin = 5    results = np.zeros((8 * size + 7 * margin, 8 * size + 7 * margin, 3))    for i in range(8):        for j in range(8):            filter_img = generate_pattern(model, layer_name, i + (j * 8), size=size)            horizontal_start = i * size + i * margin            horizontal_end = horizontal_start + size            vertical_start = j * size + j * margin            vertical_end = vertical_start + size            results[horizontal_start: horizontal_end, vertical_start: vertical_end, :] = filter_img    plt.figure(figsize=(20, 20))    plt.imshow(results/255.)    plt.show()def Visualizing_heatmaps(model, img_path):    img = image.load_img(img_path, target_size=(224, 224))    x = image.img_to_array(img)    x = np.expand_dims(x, axis=0)    x = preprocess_input(x)    preds = model.predict(x)    print('Predicted:', decode_predictions(preds, top=3)[0])    max_index = np.argmax(preds[0])    african_elephant_output = model.output[:, max_index]    last_conv_layer = model.get_layer('block5_conv3')    grads = K.gradients(african_elephant_output, last_conv_layer.output)[0]    pooled_grads = K.mean(grads, axis=(0, 1, 2))    iterate = K.function([model.input], [pooled_grads, last_conv_layer.output[0]])    pooled_grads_value, conv_layer_output_value = iterate([x])    for i in range(512):        conv_layer_output_value[:, :, i] *= pooled_grads_value[i]        heatmap = np.mean(conv_layer_output_value, axis=-1)    heatmap = np.maximum(heatmap, 0)    heatmap /= np.max(heatmap)    plt.matshow(heatmap)    plt.show()    img = cv2.imread(img_path)    heatmap = cv2.resize(heatmap, (img.shape[1], img.shape[0]))    heatmap = np.uint8(255 * heatmap)    heatmap = cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)    superimposed_img = heatmap * 0.4 + img    cv2.imwrite('Rottweiler_heatmap.jpg', superimposed_img)""" 1.可视化激活层 """np.seterr(divide='ignore', invalid='ignore')model = models.load_model('cats_and_dogs_small_2.h5')model.summary()img_path = 'E:/git_code/data/cats_and_dogs_small/train/dogs/dog.544.jpg'visualizing_activations(model, img_path)""" 2.可视化神经网络过滤器 """model = VGG16(weights=WEIGHTS_PATH_NO_TOP, include_top=False, input_shape=(150, 150, 3))layer_name = 'block3_conv1'plt.imshow(generate_pattern(model, 'block3_conv1', 0))plt.show()visualizing_filter(model, layer_name)""" 3.可视化类激活热力图 """model = VGG16(weights=WEIGHTS_PATH)img_path = 'E:/git_code/data/cats_and_dogs_small/train/dogs/dog.544.jpg'Visualizing_heatmaps(model, img_path)